import asyncio
import ssl
from typing import Callable, TypeAlias

_ProtocolFactory: TypeAlias = Callable[[], asyncio.BaseProtocol]
_SSLContext: TypeAlias = bool | None | ssl.SSLContext

class EventLoop:
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def is_closed(self) -> bool: ...
    def create_future(self) -> asyncio.Future: ...
    def create_task(self) -> asyncio.Task: ...
    def call_soon(self, callback: Callable, *args, context=None) -> None: ...
    def run_forever(self) -> None: ...
    def run_until_complete(self, future) -> None: ...
    def get_debug(self) -> bool: ...
    def set_debug(self, enabled: bool) -> None: ...
    def call_exception_handler(self, context) -> None: ...
    def stop(self) -> None: ...
    async def getaddrinfo(self, host, port, *, family=0, type=0, proto=0, flags=0): ...
    async def getnameinfo(self, sockaddr, flags=0): ...
    def call_soon_threadsafe(self, callback, *args, context=None): ...
